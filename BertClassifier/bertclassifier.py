# -*- coding: utf-8 -*-
"""BertClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rCr9WRLFh6KYJ4IBL4l5QH-eJlLvR5pJ
"""

import pandas as pd
import numpy as np
import re
import nltk
import torch
from torch.utils.data import Dataset, DataLoader
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from transformers import BertTokenizer, BertForSequenceClassification
from torch.optim import AdamW
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('punkt_tab')
stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    text = re.sub(r"@\w+|#\w+", '', text)
    text = re.sub(r"[^\w\s]", '', text)
    text = re.sub(r"\d+", '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

def preprocess_tokens(text):
    tokens = word_tokenize(text)
    return ' '.join([w for w in tokens if w not in stop_words])

# read and clean
df = pd.read_csv("combined_cleaned_dataset.csv", encoding='latin1')
df.dropna(subset=['OriginalTweet', 'Sentiment'], inplace=True)
df['label'] = df['Sentiment'].astype(int)
df['processed_tweet'] = df['OriginalTweet'].apply(clean_text).apply(preprocess_tokens)

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

class TweetDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len=128):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        encoding = self.tokenizer(
            self.texts[idx],
            padding='max_length',
            truncation=True,
            max_length=self.max_len,
            return_tensors="pt"
        )
        return {
            'input_ids': encoding['input_ids'].squeeze(0),
            'attention_mask': encoding['attention_mask'].squeeze(0),
            'labels': torch.tensor(self.labels[idx], dtype=torch.long)
        }

train_texts, test_texts, train_labels, test_labels = train_test_split(
    df['processed_tweet'], df['label'], test_size=0.2, stratify=df['label'], random_state=42
)
train_texts, val_texts, train_labels, val_labels = train_test_split(
    train_texts, train_labels, test_size=0.1, stratify=train_labels, random_state=42
)

train_dataset = TweetDataset(train_texts.tolist(), train_labels.tolist(), tokenizer)
val_dataset = TweetDataset(val_texts.tolist(), val_labels.tolist(), tokenizer)
test_dataset = TweetDataset(test_texts.tolist(), test_labels.tolist(), tokenizer)

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32)
test_loader = DataLoader(test_dataset, batch_size=32)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=3).to(device)
optimizer = AdamW(model.parameters(), lr=2e-5)

def evaluate(model, dataloader):
    model.eval()
    total, correct = 0, 0
    preds, true = [], []
    with torch.no_grad():
        for batch in dataloader:
            inputs = {k: v.to(device) for k, v in batch.items() if k != 'labels'}
            labels = batch['labels'].to(device)
            outputs = model(**inputs)
            logits = outputs.logits
            pred = torch.argmax(logits, dim=1)
            preds.extend(pred.cpu().numpy())
            true.extend(labels.cpu().numpy())
    return accuracy_score(true, preds), classification_report(true, preds, digits=4)

best_val_acc = 0
patience, no_improve = 2, 0
num_epochs = 5

for epoch in range(num_epochs):
    model.train()
    total_loss = 0
    for batch in train_loader:
        optimizer.zero_grad()
        inputs = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**inputs)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
        total_loss += loss.item()

    avg_loss = total_loss / len(train_loader)
    val_acc, _ = evaluate(model, val_loader)
    print(f"Epoch {epoch+1} | Train Loss: {avg_loss:.4f} | Val Acc: {val_acc:.4f}")

    if val_acc > best_val_acc:
        best_val_acc = val_acc
        no_improve = 0
        torch.save(model.state_dict(), "best_model.pt")
        print("Model improved and saved.")
    else:
        no_improve += 1
        if no_improve >= patience:
            print("Early stopping triggered.")
            break

model.load_state_dict(torch.load("best_model.pt"))
model.to(device)

test_acc, test_report = evaluate(model, test_loader)
print(f"\nFinal Test Accuracy: {test_acc:.4f}")
print(test_report)